---------------------------------------------
GAME SYSTEM 
3Ô∏è‚É£ Quest Flow (Main Storyline)
Quest #	Trigger	Description	Reward
Q0 (Intro)	Game start	Player setup ‚Üí intro message	‚Äî
Q1	Tutorial post	‚ÄúEnter the key on your phone‚Äù ‚Äî introduces phone	+10 postPoints
Q2	Open phone ‚Üí reply	‚ÄúRespond to job offer‚Äù	+clout
Q3	Post @job category	First real ‚Äúwork‚Äù post	+followers
Q4	Another post w/ search	Adds mini search mechanic	+clout
Q5	Answer phone	Meet Jessica (dialogue box)	unlock JessicaBox
Q6	Work for Jessica (SignalZ intro)	Learn about SignalZ	+postPoints
Q7	Like tutorial photo	Meet Kiro	unlock KiroBox
Q8	Work with Kiro (SignalZ missions)	Earn new clothes	+followers
Q9	Receive MMRR Con invite	Must reach rank/level threshold	+clout
Q10	Buy ticket + Camera app	Final prep quest	unlock WinBox / photo scene

After Q10 ‚Üí Meta Merge Scene (final post mission).

------------------------------------------------
info boxes --------

const info = new InfoBox("System initialized.");
const jess = new JessicaBox("Jessica: Welcome.");
const kiro = new KiroBox("Kiro: Let's do this.");
const win = new WinBox("üéâ You Win!");

document.getElementById("info-box-container")?.appendChild(info.getElement());
document.getElementById("jessica-box-container")?.appendChild(jess.getElement());
document.getElementById("kiro-box-container")?.appendChild(kiro.getElement());
document.getElementById("win-box-container")?.appendChild(win.getElement());

-----------------------
Each component can stay minimal until we fill them in later:

components/InfoBox.js
export class InfoBox {
  constructor(parent) {
    this.el = document.createElement("div");
    this.el.className = "info-box";
    parent.appendChild(this.el);
  }
  show(text) {
    this.el.textContent = `[INFO] ${text}`;
  }
}

components/JessicaBox.js
export class JessicaBox {
  constructor(parent) {
    this.el = document.createElement("div");
    this.el.className = "jessica-box";
    parent.appendChild(this.el);
  }
  show(text) {
    this.el.textContent = `üí¨ Jessica: ${text}`;
  }
}

components/KiroBox.js
export class KiroBox {
  constructor(parent) {
    this.el = document.createElement("div");
    this.el.className = "kiro-box";
    parent.appendChild(this.el);
  }
  show(text) {
    this.el.textContent = `ü§ñ Kiro: ${text}`;
  }
}

components/WinBox.js
export class WinBox {
  constructor(parent) {
    this.el = document.createElement("div");
    this.el.className = "win-box";
    parent.appendChild(this.el);
  }
  show(text) {
    this.el.textContent = `üèÜ ${text}`;
  }
}

components/TextBox.js
export class TextBox {
  constructor(parent) {
    this.el = document.createElement("div");
    this.el.className = "text-box";
    parent.appendChild(this.el);
  }
  show(text) {
    this.el.textContent = text;
  }
}
----------------------

call character -------

const myCharacter = {
  head: "Knight Helm",
  body: "Steel Armor",
  legs: "Leather Pants",
  shoes: "Iron Boots"
};

CharacterTemplate.inject(document.body, myCharacter);

---------------------------------------
